## Snakefile to run 4 Pop Simulations

CONFIG=["C1", "C2"]
GWAS_SIZE=["gp-1000", "gp-10000"]
TEST_SIZE=["tp-100", "tp-1000", "tp-10000"]
PC=["1"]
CORRECTION = PC + ["FGr", "NoCorrection", "ID"]
NUM_RESAMPLE = 1000


# Small
#REP = ["A1"]
#CHR = []
#for i in range(1,21):
#  CHR.append(str(i))
#NSNP = ["L-300"]
#ENV = ["env_0.0","env_0.1"]
#NUM_CAUSAL = ["c-50"]

# Big
REP = ["A5"]
for i in range(51,101):
  REP.append("A"+str(i))
CHR = []
for i in range(1,501):
  CHR.append(str(i))
NSNP = ["L-300" , "L-1000", "L-10000"]
ENV = ["env_0.0", "env_0.01", "env_0.03", "env_0.1"]
NUM_CAUSAL = ["c-300"]


### No Signal - Figures 1, S1, S2
HERITABILITY = ["h2-0.0"]
TS=["p-0.50"]


### Signal - Figures 2
#ENV = ["env_0.0", "env_-0.1", "env_0.1"]
#TS=["p-0.50", "p-0.53", "p-0.56", "p-0.59", "p-0.62"]
#NUM_CAUSAL = ["c-200", "c-2000", "c-20000"]


wildcard_constraints:
  rep="[A-Z]\d+",
  config="C.",
  h2="h2-[0-1].[0-9]",
  env="env_-?[0-9].[0-9]*",
  ts="p-[0-1].[0-9][0-9]",
  gwas_size="gp-[0-9]*",
  test_size="tp-[0-9]*",
  dir="[a-z]*",
  pc = "[0-9]*"

def get_params(x):
  out = x.split("-")[1]
  return out

def get_env(x):
  out = x.split("_")[1]
  return out

def get_pc_num(x):
  end = str(int(x) + 5)
  start = str(6)
  out = start + "-" + end
  if int(x) == 1:
     out = str(6)
  return out

rule all:
    input:
        expand("output/Simulate_Genotypes/4PopSplit/{rep}/{config}/{gwas_size}/{test_size}/gwas_{nsnp}.fst.summary", rep = REP, config=CONFIG, gwas_size = GWAS_SIZE, test_size = TEST_SIZE, nsnp=NSNP, chr=CHR, h2=HERITABILITY, ts=TS, nc=NUM_CAUSAL, env=ENV, pc=PC, correction = CORRECTION)


##########################
### Simluate Genotypes ###
##########################

rule simulate_genotypes_4popsplit:
    output:
        "output/Simulate_Genotypes/4PopSplit/{rep}/genos-{chr}.vcf",
	"output/Simulate_Genotypes/4PopSplit/{rep}/genos-{chr}.pop"
    threads: 1
    resources:
        mem_mb=50000,
	time="02:00:00"
    shell:
        """
        python3 -u code/Simulate_Genotypes/generate_genotypes_4PopSplit.py \
	      --outpre output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/genos-{wildcards.chr} \
       	--Nanc 10000 \
	      --NA 10000 \
	      --NB 10000 \
	      --NC 10000 \
	      --ND 10000 \
	      --chr {wildcards.chr} \
  	    -a 10000 \
	      -b 10000 \
	      -c 10000 \
	      -d 10000 \
        -s1 4400 \
        -s2 2200 \
        -L 1 \
        -u 1e-5  \
        -nsnp 1000
	rm -f output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/genos-{wildcards.chr}_*
        """

rule format_VCF:
    input:
        "output/Simulate_Genotypes/4PopSplit/{rep}/genos-{chr}.vcf"
    output:
        gz="output/Simulate_Genotypes/4PopSplit/{rep}/genos-{chr}.tmp.vcf.gz",
        #tbi="output/Simulate_Genotypes/4PopSplit/{rep}/genos-{chr}.tmp.vcf.gz.tbi"
    shell:
        """
	      head -n6 {input} > output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/header_{wildcards.chr}.txt
	      cat output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/header_{wildcards.chr}.txt <(cat output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/genos-{wildcards.chr}.vcf | awk -v OFS="\t" 'NR>6 {{$3=$1"_"$2"_A_T";$4="A"; $5="T"; print ;}}') | bgzip > {output.gz}
	      #tabix -p vcf {output.gz}
			  rm output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/header_{wildcards.chr}.txt
			  rm {input}
			  """

rule concat_vcfs:
    input:
        expand("output/Simulate_Genotypes/4PopSplit/{{rep}}/genos-{chr}.tmp.vcf.gz", chr=CHR)
    output:
        "output/Simulate_Genotypes/4PopSplit/{rep}/genos.ids.vcf.gz"
    shell:
        """
        bcftools concat {input} -o output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/temp.vcf.gz -O z
        bcftools annotate --rename-chrs code/Simulate_Genotypes/convert_chr.txt output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/temp.vcf.gz -o {output} -O z
        rm output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/temp.vcf.gz
        rm {input}
        """

rule convert_vcf_to_plink:
    input:
        "output/Simulate_Genotypes/4PopSplit/{rep}/genos.ids.vcf.gz"
    output:
        "output/Simulate_Genotypes/4PopSplit/{rep}/genos.psam",
        "output/Simulate_Genotypes/4PopSplit/{rep}/genos.pgen",
        "output/Simulate_Genotypes/4PopSplit/{rep}/genos.pvar"
    shell:
        """
        plink2 \
        --double-id \
        --make-pgen \
        --out output/Simulate_Genotypes/4PopSplit/{wildcards.rep}/genos \
        --vcf {input}
        rm {input}
        """

rule concat_pop_files:
    input:
        all = expand("output/Simulate_Genotypes/4PopSplit/{{rep}}/genos-{chr}.pop", chr=CHR),
        one = "output/Simulate_Genotypes/4PopSplit/{rep}/genos-1.pop"
    output:
        "output/Simulate_Genotypes/4PopSplit/{rep}/genos.pop"
    shell:
        """
        mv {input.one} {output}
        rm -f {input.all}
        """

rule create_panels_4PopSplit:
    input:
        "output/Simulate_Genotypes/4PopSplit/{rep}/genos.pop"
    output:
        C1_gwas = "output/Simulate_Genotypes/4PopSplit/{rep}/C1/{gwas_size}/{test_size}/ids.gwas",
        C1_test = "output/Simulate_Genotypes/4PopSplit/{rep}/C1/{gwas_size}/{test_size}/ids.test",
        C2_gwas = "output/Simulate_Genotypes/4PopSplit/{rep}/C2/{gwas_size}/{test_size}/ids.gwas",
        C2_test ="output/Simulate_Genotypes/4PopSplit/{rep}/C2/{gwas_size}/{test_size}/ids.test"
    params:
        gSize = lambda wildcards: get_params(wildcards.gwas_size),
        tSize = lambda wildcards: get_params(wildcards.test_size)
    shell:
        """
        Rscript code/Simulate_Genotypes/split_gwas-test_4PopSplit.R {input} {output.C1_gwas} {output.C1_test} {output.C2_gwas} {output.C2_test} {params.gSize} {params.tSize}
        """

rule get_variant_freq:
    input:
        genos="output/Simulate_Genotypes/4PopSplit/{rep}/genos.psam",
        gwasIDs="output/Simulate_Genotypes/4PopSplit/{rep}/{config}/{gwas_size}/{test_size}/ids.gwas",
        testIDs="output/Simulate_Genotypes/4PopSplit/{rep}/{config}/{gwas_size}/{test_size}/ids.test"
    output:
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/{gwas_size}/{test_size}/genos-test.afreq",
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/{gwas_size}/{test_size}/genos-gwas.afreq"
    params:
        plink_prefix = "output/Simulate_Genotypes/4PopSplit/{rep}/genos",
        out_gwas = "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/{gwas_size}/{test_size}/genos-gwas",
        out_test = "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/{gwas_size}/{test_size}/genos-test"
    shell:
        """
        plink2 \
	      --pfile {params.plink_prefix} \
	      --keep {input.gwasIDs} \
	      --freq \
		    --out {params.out_gwas}

			  plink2 \
        --pfile {params.plink_prefix} \
        --keep {input.testIDs} \
        --freq \
        --out {params.out_test}
        """

rule get_common_snp_list:
    input:
        test="output/Simulate_Genotypes/4PopSplit/{rep}/{config}/{gwas_size}/{test_size}/genos-test.afreq",
        gwas="output/Simulate_Genotypes/4PopSplit/{rep}/{config}/{gwas_size}/{test_size}/genos-gwas.afreq"
    output:
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/{gwas_size}/{test_size}/common_snps_{nsnp}.txt"
    params:
        num_snp = lambda wildcards: get_params(wildcards.nsnp)
    shell:
        """
        Rscript code/Simulate_Genotypes/get_common_snp_list.R {input.test} {input.gwas} {params.num_snp} {output}
        """

rule calculate_fst:
    input:
        genos = "output/Simulate_Genotypes/4PopSplit/{rep}/genos.psam",
        gwas_ids="output/Simulate_Genotypes/4PopSplit/{rep}/{config}/{gwas_size}/{test_size}/ids.gwas",
        test_ids="output/Simulate_Genotypes/4PopSplit/{rep}/{config}/{gwas_size}/{test_size}/ids.test",
        snps = "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/{gwas_size}/{test_size}/common_snps_{nsnp}.txt"
    output:
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/{gwas_size}/{test_size}/gwas_{nsnp}.fst.summary",
        "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/{gwas_size}/{test_size}/test_{nsnp}.fst.summary"
    params:
        plink_prefix = "output/Simulate_Genotypes/4PopSplit/{rep}/genos",
        out_gwas = "output/Simulate_Genotypes/4PopSplit/{rep}/{config}/{gwas_size}/{test_size}/gwas_{nsnp}",
        out_test ="output/Simulate_Genotypes/4PopSplit/{rep}/{config}/{gwas_size}/{test_size}/test_{nsnp}"
    shell:
        """
	plink2 \
	      --pfile {params.plink_prefix} \
	      --extract {input.snps} \
	      --keep {input.gwas_ids} \
	      --pheno {input.gwas_ids} \
	      --fst POP \
	      --out {params.out_gwas}

	      plink2 \
	      --pfile {params.plink_prefix} \
	      --extract {input.snps} \
	      --keep {input.test_ids} \
	      --pheno {input.test_ids} \
	      --fst POP \
	      --out {params.out_test}
		    """
